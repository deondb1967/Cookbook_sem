---
title: "Subsetting a data frame using the dplyr package"
---

```{r}
#| echo: FALSE
#| include: FALSE
#| warning: FALSE
#| message: FALSE
library(tidyverse)
library(psychTools)

mybfi <- bfi %>% 
  select(c(1:5, 16:20, 26:28)) %>% 
  drop_na() %>% 
  slice_sample(n = 1000)

psych::describe(mybfi)

summary(mybfi)
```

# Using dplyr to filter rows from a data frame

## Filtering rows by consecutive row numbers

```{r}
mybfi %>% slice(1:10)
```

## Filtering cases by non-consecutive row numbers

```{r}
mybfi %>% slice(1, 3, 5, 7)
```

## Filtering cases that meet a certain condition

```{r results = 'hide'}
mybfi %>% filter(gender == 1)

mybfi %>% filter(education > 3)

mybfi %>% filter(age == 30)

mybfi %>% filter(age <= 30)

mybfi %>% filter(age >= 31)
```

## Filtering cases that don't meet a certain condition

```{r results = 'hide'}
mybfi %>% filter(!gender == 1)

mybfi %>% filter(!education > 3)

mybfi %>% filter(!age > 30)
```

## Filtering cases on the basis of two or more conditions

```{r}
mybfi %>% filter(gender == 1 & age > 60)

mybfi %>% 
  filter(gender == 1 | age > 60) %>% 
  slice_sample(n = 20)
```

## Storing the filtered cases in a new data frame

```{r}
df_new <- mybfi %>% 
  filter(age > 28 & education >= 3) %>% 
  slice(1:15) %>% 
  arrange(age)

df_new
```

# Selecting variables with the dplyr package

```{r results = 'hide'}
library(dplyr)
select(mybfi, A1:A5)
select(mybfi, A1, A3, N1, N3)
select(mybfi, starts_with("A"))
select(mybfi, !starts_with("A"))
select(mybfi, ends_with("r"))


mybfi %>% select(A1:A5)
mybfi %>% select(A1, A3, N1, N3)
mybfi %>% select(starts_with("A"))
mybfi %>% select(!starts_with("A"))
mybfi %>% select(ends_with("r"))


mybfi %>% select(1:5)
mybfi %>% select(1, 3, 6, 8)
```

## Combining select and slice

```{r results = 'hide'}
mybfi %>%
  select(A1:5) %>% 
  slice(1,3,5)
```

## Combing select and filter

```{r results = 'hide'}
mybfi %>%
  filter(gender == 2) %>% 
  slice(1:10) %>% 
  select(A1:A5)
```

## Randomly select rows from a data frame without replacement

```{r}
mybfi %>% 
  sample_n(10)
```

## Randomly select rows from a data frame with replacement

```{r}
mybfi %>% 
  sample_n(10, replace = TRUE)
```

## Randomly select a fraction of rows without replacement

```{r}
mybfi %>% 
  sample_frac(.01)
```

## Randomly select a fraction of rows with replacement

```{r}
mybfi %>% 
  sample_frac(0.01, replace = TRUE)
```

## Randomly split a data frame into two parts

```{r}
## Specify exactly how many persons you want in the two groups, respectively.
## Here we want n = 600 in the first group and n = 400 in the second.
v          <- as.vector(c(rep(TRUE, 800), rep(FALSE, 200))) 

selection  <- sample(v) 


mybfi1     <- mybfi %>%
  filter(selection) 

mybfi2     <- mybfi %>% 
  filter(!selection) 
  

nrow(mybfi1)
nrow(mybfi2)
```

## Excercises

1.  First use dollar notation and then square brackets to find the mean and standard deviation of variable A3.

```{r}
mean(mybfi$A1)
sd(mybfi$A1)

mean(mybfi[, 1])
sd(mybfi[, 1])

mean(mybfi[, "A1"])
sd(mybfi[, "A1"])
```


2.  First use dollar notation and then square brackets to find the correlation of variables N1 and N3.

```{r}
cor(mybfi$N1, mybfi$N3)

cor(mybfi[, c(6, 8)])

cor(mybfi[, c("N1","N3")])
```

5.  Use square bracket notation to find the correlations of the five agreeableness items for the first 500 persons.

```{r}
cor(mybfi[1:500, 1:5])
cor(mybfi[1:500, c("A1", "A2", "A3", "A4", "A5")])
```


6.  Use the dplyr package with the pipe operator to randomly select 500 cases from the mybfi data frame and then use the psych package to find the correlations of the five agreeableness variables.

```{r}
mybfi %>% 
  sample_n(500) %>% 
  select(A1:A5) %>% 
  cor()
```


7.  Randomly split (without replacement) the mybfi data frame into two data frames where the first data frame contains 800 cases and the second 200 cases. Store the first data frame as mybfi1 and the second as mybfi2. Next, use the pipe operator to select variables A1, A3, N2 and N4, and then find the correlations of these variables. Do this for each of the two data frames. Note that the corresponding correlations are not exactly the same across the two data sets, which illustrates the role of sampling error.

```{r}
## Specify exactly how many persons you want in the two groups, respectively.
## Here we want n = 600 in the first group and n = 400 in the second.
v          <- as.vector(c(rep(TRUE, 800), rep(FALSE, 200))) 

selection  <- sample(v) 


mybfi1     <- mybfi %>%
  filter(selection) 

mybfi2     <- mybfi %>% 
  filter(!selection) 
  
mybfi1 %>% 
  select(A1, A3, N2, N4) %>% 
  cor()

mybfi2 %>% 
  select(A1, A3, N2, N4) %>% 
  cor()

```


8.  Use the dplyr package to select the rows of all the women (coded as 2 in the gender column). Then find the correlations of the variables N1 to N5. Do the same for the men.

```{r}
mybfi %>% 
  filter(gender == 2) %>% 
  select(N1:N5) %>% 
  cor()

mybfi %>% 
  filter(gender == 1) %>% 
  select(N1:N5) %>% 
  cor()
```

9.   Use the dplyr package to select the rows of the men who (a) have education levels of 3 or above and (b) are older than 40. Then find the correlations of variables N1 to N5.

```{r}
mybfi %>% 
  filter(gender == 1 & education >= 3 & age > 40) %>% 
  select(N1:N5) %>% 
  cor()
```


### Selecting consecutive rows by their row numbers with square brackets

We can select rows of a data frame by their row numbers using square brackets. Any particular cell in a data frame can be indexed by its row number and its column number, for instance the score of the person in row one on the variable in column one has the index **`mybfi[1, 1]`**. We first type the name of the data frame and then the square brackets with the row and column numbers. Note that we place a comma in the square brackets to separate the row and column numbers. The value before the comma pertains to the row number, whereas the value after the comma pertains to the column number. So, the score of the person in row five on the variable in column six of the mybfi data frame is indexed by **`mybfi[5, 6]`**.

If we want to select a row and include all the columns we leave the space after the comma empty. So if we want to use the scores of the person in the sixth row of the data frame on all the variables we would do it as follows: **`mybfi[6, ]`**.

In the example below we select the persons in rows 1 to 20, using all the variables.

```{r}
mybfi[1:10, ]
```

### Selecting non-consecutive rows by their row numbers with square brackets

We can select non-consecutive rows of a data frame by concatenating the row numbers inside round brackets, preceded by the letter "c". For instance, to select rows 2, 4, and 7 of the mybfi data frame we type **`mybfi[c(2, 4, 7), ]`**. Note that the space after the comma indicates that we want to include all the variables.

In the example below we select rows 1, 3, 5, 7 and 9 from the bfi data frame.

```{r}
mybfi[c(1, 3, 5, 7, 9), ]
```

## Selecting columns (variables) from a data frame

### Selecting a variable with \$ notation

We can select a variable from a data frame using dollar notation by first typing the name of the data frame, second typing a \$ symbol, and then typing the name of the variable. For instance, we select variable N1 of the mybfi data frame as follows: **`mybfi$N1`**

In this example we are selecting the variable A1 from the `mybfi` data frame. Next, I find the mean and standard deviation of variable A1.

```{r}
mybfi$A1
mean(mybfi$A1)
sd(mybfi$A1)
```

### Selecting a variable by its column number with square brackets

We can select a variable by its column number in the data frame using square brackets. Any particular cell in a data frame can be indexed by its row number and its column number, for instance the score of the person in row one on the variable in column one has the index **`mybfi[1, 1]`**. We first type the name of the data frame and then the square brackets with the row and column numbers. Note that we place a comma in the square brackets to separate the row and column numbers. The value before the comma pertains to the row number, whereas the value after the comma pertains to the column number. So, the score of the person in row five on the variable in column six of the mybfi data frame is indexed by **`mybfi[5, 6]`**.

If we want to select a variable and include all the rows we leave the space before the comma empty. So if we want to use the scores of all the persons in the data frame on the variable in column six we would do it as follows: **`mybfi[, 6]`**.

In the example below we select variable A1, which is in the first column, using all the rows.

```{r}
mybfi[, 1] 
mean(mybfi[, 1])
sd(mybfi[, 1])
```

## Selecting a variable by its name with square brackets

We can also use square brackets to select a variable by its name. For instance, to select variable N1 of the mybfi data frame, we type mybfi\[, "N1". Note that we have to type the name of the variable inside quotation marks.

In the example below we select variable A1 from the mybfi data frame.

```{r}
mybfi[, "A1"]
mean(mybfi[, "A1"])
sd(mybfi[, "A1"])
```

## Selecting two or more contiguous variables by their column numbers with square brackets

If the columns we want to select are contiguous--i.e. next to each other or together in sequence--we can type the first and last column numbers separated by a colon. For instance, to select the variables in columns three to six of the mybfi data frame we would type **`mybfi[, 3:6]`**.

In the example below we select the variables in columns one to five. Next we ask for descriptive statistics of these variables.

```{r}
mybfi[, 1:5]
psych::describe(mybfi[, 1:5])
cor(mybfi[, 1:5])
```

## Selecting two or more non-contiguous variables by their column numbers with square brackets

```{r}
mybfi[, c(1,3,5)]
```

## Selecting two or more variables by their names with square brackets

```{r}
mybfi[, c("A1", "A3", "A5")]
```



## Fun with Starwars characters

```{r}
starwars

starwars %>% 
  filter(!species == "Human") %>% 
  select(name, height, mass, eye_color, species, films)
```

